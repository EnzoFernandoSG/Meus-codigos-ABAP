CLASS report_view DEFINITION.
  PUBLIC SECTION.
    TYPES: tabela TYPE TABLE OF report_model=>ty_relatorio.

    DATA: cl_model          TYPE REF TO report_model,
          lo_events         TYPE REF TO cl_salv_events,
          events            TYPE REF TO cl_salv_events_table,
          columns           TYPE REF TO cl_salv_columns,
          column            TYPE REF TO cl_salv_column,
          obj_tree          TYPE REF TO cl_salv_tree,
          obj_nodes         TYPE REF TO cl_salv_nodes,
          obj_node          TYPE REF TO cl_salv_node,
          lt_selected_nodes TYPE salv_t_nodes,
          ls_selected_nodes TYPE salv_s_nodes,
          obj_settings      TYPE REF TO cl_salv_tree_settings,
          obj_events        TYPE REF TO cl_salv_events_tree,
          salv_selection    TYPE REF TO cl_salv_selections_tree,
          obj_control       TYPE REF TO cl_item_tree_control,
          w_layout          TYPE slis_layout_alv,
          exp_table         TYPE tabela,
          lt_selected_data  TYPE TABLE OF report_model=>ty_relatorio,
          lt_return         TYPE TABLE OF bapiret2,
          ls_return         TYPE bapiret2.


    CONSTANTS: c_x TYPE c VALUE 'X'.

    METHODS:
      constructor IMPORTING model TYPE REF TO report_model,
      initialization,
      end_of_selection IMPORTING model TYPE REF TO report_model,
      on_user_command FOR EVENT added_function OF cl_salv_events
        IMPORTING e_salv_function,
      selected_line,
      get_alv_instance,
      set_tree_settings,
      set_tree_status,
      set_tree_event,
      get_selected_rows
        IMPORTING
          columnname TYPE lvc_fname
          salv_node  TYPE REF TO cl_salv_node
        CHANGING
          value      TYPE REF TO data,
      gerar_migo,
      gerar_miro,
      estor_migo,
      estor_miro,
      add_nodes IMPORTING it_data TYPE tabela,
      display_alv IMPORTING it_data TYPE tabela.
ENDCLASS.

CLASS report_view IMPLEMENTATION.
  METHOD constructor.
    me->cl_model ?= model.
  ENDMETHOD.

  METHOD initialization.

  ENDMETHOD.
  METHOD end_of_selection.

    IF cl_model->lt_table IS INITIAL.
      MESSAGE 'Nenhum dado encontrado' TYPE 'I'.
    ELSE.

      me->display_alv( it_data = cl_model->lt_table ).

    ENDIF.

  ENDMETHOD.

  METHOD selected_line.
    DATA: n_compra     TYPE REF TO data,
          n_fornecedor TYPE REF TO data,
          n_item       TYPE REF TO data.

    FIELD-SYMBOLS: <fs_value> TYPE any.

    salv_selection = obj_tree->get_selections( ).
    obj_nodes = obj_tree->get_nodes( ).
    lt_selected_nodes = salv_selection->get_selected_nodes( ).

    LOOP AT lt_selected_nodes INTO ls_selected_nodes.
      IF ls_selected_nodes-node->get_text( ) EQ 'Pedido de Compra'.

        obj_node = ls_selected_nodes-node->get_parent( ).
        me->get_selected_rows( EXPORTING columnname = 'LIFNR'
                                      salv_node = obj_node
                            CHANGING  value = n_fornecedor ).

*        ASSIGN n_fornecedor->* TO <fs_value> CASTING TYPE lifnr.
*        bapi_fornecedor = <fs_value>.

        me->get_selected_rows( EXPORTING columnname = 'EBELN'
                                      salv_node = ls_selected_nodes-node
                            CHANGING  value = n_compra ).

        ASSIGN n_compra->* TO <fs_value> CASTING TYPE ebeln.
        bapi_compra = <fs_value>.

        DATA(lt_children) = ls_selected_nodes-node->get_children( ).

        LOOP AT lt_children INTO ls_selected_nodes.

          me->get_selected_rows( EXPORTING columnname = 'EBELP'
                                        salv_node = ls_selected_nodes-node
                              CHANGING  value = n_item ).

          ASSIGN n_item->* TO <fs_value> CASTING TYPE ebelp.
          bapi_item = <fs_value>.

          cl_model->dados_bapi( ).

        ENDLOOP.
      ELSE.
        CLEAR ls_selected_nodes.
        MESSAGE | Selecione um Pedido de compra | TYPE 'E'.
      ENDIF.

    ENDLOOP.

  ENDMETHOD.

  METHOD on_user_command.
    CASE e_salv_function.
      WHEN 'GERAR'.
        command = '1'.
        me->gerar_migo( ).
      WHEN 'GERAR_MIRO'.
        count_doc_item = 0.
        command = '2'.
        me->gerar_miro( ).
      WHEN 'ESTOR_MIGO'.
        command = '3'.
        me->estor_migo( ).
      WHEN 'ESTOR_MIRO'.
        command = '4'.
        me->estor_miro( ).
    ENDCASE.
    CLEAR ls_return.
    CLEAR lt_return.
  ENDMETHOD.

  METHOD set_tree_settings.
    obj_settings = obj_tree->get_tree_settings( ).

    obj_settings->set_header( 'ALV TREE' ).
    obj_settings->set_hierarchy_header( 'Dados' ).
    obj_settings->set_hierarchy_tooltip( 'Fornecedores' ).
    obj_settings->set_hierarchy_size( 30 ).
    obj_settings->set_hierarchy_icon( '@4B@' ).


  ENDMETHOD.
  METHOD set_tree_status.

    obj_tree->set_screen_status(
    report = sy-repid
    pfstatus = 'STATUS1'
    set_functions = obj_tree->c_functions_all
    ).
  ENDMETHOD.

  METHOD  set_tree_event.

    obj_events = obj_tree->get_event( ).
    SET HANDLER me->on_user_command FOR obj_events.
  ENDMETHOD.

  METHOD add_nodes.
    DATA: lv_text  TYPE lvc_value,
          lt_lifnr TYPE TABLE OF ekko-lifnr,
          lv_lifnr TYPE ekko-lifnr,
          obj_node TYPE REF TO cl_salv_node,
          wa_blank TYPE report_model=>ty_relatorio.

    obj_nodes  = obj_tree->get_nodes( ).

    LOOP AT it_data INTO DATA(wa_data).

      READ TABLE lt_lifnr INTO lv_lifnr WITH KEY table_line = wa_data-lifnr.
      IF sy-subrc <> 0.

        APPEND wa_data-lifnr TO lt_lifnr.

        CLEAR wa_blank.
        wa_blank-lifnr = wa_data-lifnr.

        obj_node = obj_nodes->add_node(
          related_node = ''
          text         = lv_text
          data_row     = wa_blank
          relationship = cl_gui_column_tree=>relat_first_child
        ).

        DATA(lv_compradoc_key) = obj_node->get_key( ).
      ENDIF.

      CLEAR wa_blank.
      wa_blank-ebeln = wa_data-ebeln.

      obj_node = obj_nodes->add_node(
        related_node = lv_compradoc_key
        text         = 'Pedido de Compra'
        data_row     = wa_blank
        relationship = cl_gui_column_tree=>relat_first_child
      ).

      DATA(lv_pedidocompra_key) = obj_node->get_key( ).

      CLEAR wa_blank.
      wa_blank-ebelp = wa_data-ebelp.

      obj_node = obj_nodes->add_node(
        related_node = lv_pedidocompra_key
        text         = 'Item'
        data_row     = wa_blank
        relationship = cl_gui_column_tree=>relat_first_child
      ).
    ENDLOOP.
  ENDMETHOD.

  METHOD get_selected_rows.

    DATA salv_item TYPE REF TO cl_salv_item.

    salv_item = salv_node->get_item( columnname = columnname ).
    value = salv_item->get_value( ).

  ENDMETHOD.
  METHOD gerar_migo.
    DATA ls_hdr            TYPE bapi2017_gm_head_ret.
    me->selected_line( ).
    CALL FUNCTION 'BAPI_GOODSMVT_CREATE'
      EXPORTING
        goodsmvt_header  = cl_model->ls_goodsmvt_header
        goodsmvt_code    = '01'
      IMPORTING
        goodsmvt_headret = ls_hdr
      TABLES
        goodsmvt_item    = cl_model->lt_goodsmvt_item
        return           = lt_return.

    IF lt_return IS INITIAL.
      MESSAGE: 'Material Document posted' TYPE 'I'.

      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.

      WRITE: 'Error during posting Material document:', /.
      LOOP AT lt_return INTO ls_return.
        MESSAGE ls_return-message TYPE 'I'.
      ENDLOOP.

    ENDIF.

  ENDMETHOD.
  METHOD gerar_miro.

    me->selected_line( ).

    CALL FUNCTION 'BAPI_INCOMINGINVOICE_CREATE'
      EXPORTING
        headerdata = cl_model->lt_invoice_header
      TABLES
        itemdata   = cl_model->lt_invoice_item
*       accountingdata   = cl_model->lt_invoice_accounting
        return     = lt_return.

    BREAK-POINT.

    LOOP AT lt_return INTO ls_return.
*      IF ls_return-type = 'E'.
      MESSAGE ls_return-message TYPE 'I'.
*      ENDIF.
    ENDLOOP.

*   IF sy-subrc = 0.
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.
*    ENDIF.
  ENDMETHOD.
  METHOD estor_migo.

    me->selected_line( ).

    DATA: lv_mblnr   TYPE mblnr,   "Número do documento de material
          lv_mjahr   TYPE mjahr,   "Ano do documento de material
          lv_budat   TYPE budat,  "Data de lançamento
          lv_headret TYPE bapi2017_gm_head_ret.

    BREAK-POINT.

    CALL FUNCTION 'BAPI_GOODSMVT_CANCEL'
      EXPORTING
        materialdocument    = cl_model->ls_bapi-belnr "ekbe-belnr
        matdocumentyear     = cl_model->ls_bapi-lfgja "ekbe-lfgja
        goodsmvt_pstng_date = cl_model->ls_bapi-aedat "ekko-aedat
        goodsmvt_pr_uname   = sy-uname
      IMPORTING
        goodsmvt_headret    = lv_headret
      TABLES
        return              = lt_return.

    LOOP AT lt_return INTO ls_return.
      IF ls_return-type = 'E'.
        MESSAGE: ls_return-message TYPE 'I'.
      ENDIF.
    ENDLOOP.

    IF lt_return IS INITIAL.
      CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
        EXPORTING
          wait = 'X'.
      MESSAGE: 'Estorno realizado com sucesso' TYPE 'I'.
    ELSE.
      CALL FUNCTION 'BAPI_TRANSACTION_ROLLBACK'.
      WRITE: 'Erro ao realizar o estorno'.
    ENDIF.
  ENDMETHOD.
  METHOD estor_miro.

    me->selected_line( ).

    CALL FUNCTION 'BAPI_INCOMINGINVOICE_CANCEL'
      EXPORTING
        invoicedocnumber = cl_model->ls_incv_cancel-inv_doc_no
        fiscalyear       = cl_model->ls_incv_cancel-fisc_year
        reasonreversal   = cl_model->ls_incv_cancel-reason_rev
      TABLES
        return           = lt_return.

    LOOP AT lt_return INTO ls_return.
*      IF ls_return-type = 'E'.
      MESSAGE ls_return-message TYPE 'I'.
*      ENDIF.
    ENDLOOP.

    " Commit para finalizar o estorno
    CALL FUNCTION 'BAPI_TRANSACTION_COMMIT'
      EXPORTING
        wait = 'X'.

    CLEAR cl_model->ls_incv_cancel.

    BREAK-POINT.
  ENDMETHOD.
  METHOD get_alv_instance.

    TRY.
        CALL METHOD cl_salv_tree=>factory
          IMPORTING
            r_salv_tree = obj_tree
          CHANGING
            t_table     = exp_table.

      CATCH cx_salv_error.
    ENDTRY.

  ENDMETHOD.

  METHOD:display_alv.

    me->get_alv_instance( ).

    me->set_tree_event( ).

    me->set_tree_status( ).

    me->set_tree_settings( ).

    me->add_nodes( it_data ).

    obj_tree->display( ).

  ENDMETHOD.
ENDCLASS.